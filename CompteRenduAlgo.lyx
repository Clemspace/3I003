#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Compte Rendu 3I003 Confitures :))
\end_layout

\begin_layout Author
Rémi Dadvisard et Clément Castellon
\end_layout

\begin_layout Section
Partie Théorique
\end_layout

\begin_layout Subsection
Algorithme 1: Recherche Exhaustive
\end_layout

\begin_layout Paragraph
Question 1
\end_layout

\begin_layout Standard
Montrer par récurrence forte sur S la validité et la terminaison de cet
 algorithme lorsqu’il est appelé par l’appel initial RechercheExhaustive(k,
 V, S).
\end_layout

\begin_layout Description
Terminaison:
\end_layout

\begin_layout Standard

\emph on
RechercheExhaustive(k, V, S) est une fonction récursive, et ne fait des
 appels que sur S, ou S-V[i].
\end_layout

\begin_layout Itemize

\emph on
Sur S, si S<V[i], alors on cherche a comparer avec V[i-1](<V[i]), et on
 termine quand on atteint V[0].
\end_layout

\begin_layout Itemize

\emph on
Sur S-V[i], si S-V[i] est négatif, alors l'algo termine.
 
\end_layout

\begin_layout Standard

\emph on
L’algorithe se termine si s≤0, récursivement, la valeur de S est réduite
 de V[i] ≥0, à chaque appel, on a une boucle strictement décroissante, donc
 il existe un appel ou s sera négatif ou nul.
 ET donc si un appel récursif termine, tous les appels récursifs termineront.
 
\end_layout

\begin_layout Description
Validité:
\end_layout

\begin_layout Description

\emph on
P(i) = « NbCont égal au nombre minimum pour remplir S=i » P(0) =0 donc valide
 P(1) = 1 Valide (V[1] = 1 étant obligatoire)
\end_layout

\begin_layout Description

\emph on
x prends la plus petite valeur de RechercheExhaustive(k, V, S-V[k]) à RechercheE
xhaustive(k, V, S-V[1]).
 Qui sont valides par HR.
 Or, pour chacune de ses valeurs; il a besoin d’un seul bocal en plus, donc
 le nombre minimum sera égal a min(RechercheExhaustive(k, V, S-x) avec x
 appartenant à V) + 1.
 NBCont(i) renvoie ce nombre, donc: 
\end_layout

\begin_layout Description

\emph on
RechercheExhaustive(k, V, S) est valide.
 
\end_layout

\begin_layout Description
Conclusion: 
\emph on
donc l'algorithme est valide et se termine
\end_layout

\begin_layout Paragraph
Question 2
\end_layout

\begin_layout Standard
Supposons que les seuls bocaux disponibles sont des bocaux de capacités
 1dg et 2dg.
 On note a(s) le nombre d’appels récursifs effectués par RechercheExhaustive(2,
 [ 1, 2 ], s).
 
\end_layout

\begin_layout Standard
a)Exprimer a(s) sous forme d’une suite récursive.
\end_layout

\begin_layout Standard
\begin_inset Formula $a(s)$
\end_inset


\begin_inset Formula $=\begin{cases}
0 & si\:s=0\\
2 & si\:s=1\\
a(s-1)+a(s-2)+2 & si\:s\geq2
\end{cases}$
\end_inset

 .
\end_layout

\begin_layout Quote
Soit b(s) la suite définie par:
\end_layout

\begin_layout Verse
\begin_inset Formula $b\left(s\right)=\begin{cases}
0 & si\;s=0\\
2 & si\;s=1\\
2b(s-2)+2 & si\;s\geq2
\end{cases}$
\end_inset

 .
\end_layout

\begin_layout Quote
Soit c(s) la suite définie par:
\end_layout

\begin_layout Verse
\begin_inset Formula $c\left(s\right)=\begin{cases}
0 & si\;s=0\\
2c(s-1)+2 & si\;s\geq1
\end{cases}$
\end_inset

 .
\end_layout

\begin_layout Standard
\noindent
b)Montrer que pour tout entier 
\begin_inset Formula $s\geq0$
\end_inset

, on a 
\begin_inset Formula $b(s)\leq a(s)\leq c(s)$
\end_inset

.
\end_layout

\begin_layout Standard

\emph on
La suite est strictement croissante et positive, on a donc 
\begin_inset Formula $a(s-1)+a(s-2)+2\geq a(s-1)$
\end_inset

 et 
\begin_inset Formula $a(s-1)\geq a(s-2)$
\end_inset

 on a donc 
\begin_inset Formula $a(s-1)+a(s-2)\leq2a(s-1)$
\end_inset

 et 
\begin_inset Formula $2a(s-2)\leq a(s-1)+a(s-2)$
\end_inset

 on a ainsi 
\begin_inset Formula $2a(s-2)+2\leq a(s-1)+a(s-2)+2\leq2(s-1)$
\end_inset

 or les suites a, b et c ont les mêmes premiers termes, on peut donc remplacer
 les termes de l'inégalité.
 on a ainsi 
\begin_inset Formula $b(s)\leq a(s)\leq c(s)$
\end_inset

pour tout entier 
\begin_inset Formula $s\geq0$
\end_inset


\end_layout

\begin_layout Standard
\noindent
c)Quel est le terme général de la suite c(s)? Justifiez.
\end_layout

\begin_layout Standard

\emph on
Initialisation:
\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $c_{0}=0$
\end_inset


\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $c_{1}=2$
\end_inset


\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $c_{2}=6$
\end_inset

 
\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $c_{3}=14$
\end_inset


\end_layout

\begin_layout Standard

\emph on
On décèle que 
\begin_inset Formula $c_{n}=2^{n+1}-2$
\end_inset


\end_layout

\begin_layout Standard

\emph on
Supposons 
\begin_inset Formula $P_{n}=\:c_{n}=2^{n+1}-2$
\end_inset

 pour un n donné, montrons 
\begin_inset Formula $P_{n+1}$
\end_inset

: 
\begin_inset Formula $c_{n+1}=2^{n+2}-2$
\end_inset


\end_layout

\begin_layout Standard

\emph on
Induction:
\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $c_{n+1}=2c(n+1-1)+2$
\end_inset


\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $c_{n+1}=2*(2^{n+1}-2)+2$
\end_inset

 Par H.R
\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $c_{n+1}=2^{n+2}-4+2$
\end_inset


\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $c_{n+1}=2^{n+2}-2$
\end_inset


\end_layout

\begin_layout Standard

\emph on
Hérédité confirmée.
 On en déduit donc que 
\begin_inset Formula $c_{n}=2^{n+1}-2$
\end_inset

 pour tout 
\begin_inset Formula $n\geq0$
\end_inset

.
\end_layout

\begin_layout Standard
\noindent
d)En déduire que 
\begin_inset Formula $b(s)=c(\lceil\frac{s}{2}\rceil)$
\end_inset

.
\end_layout

\begin_layout Standard

\emph on
Posons P:
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $b(k)=c(\lceil\frac{k}{2}\rceil)$
\end_inset

 avec 
\begin_inset Formula $k=\left\{ 0,...,n\right\} $
\end_inset


\begin_inset Quotes erd
\end_inset

 pour un n donné, montrons 
\begin_inset Formula $P_{n+1}$
\end_inset


\end_layout

\begin_layout Standard

\emph on
Induction:
\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $b(n+1)=2b(n-1)+2$
\end_inset


\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $b(n+1)=2c(\lceil\frac{n-1}{2}\rceil)+2$
\end_inset

 Par H.R
\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $b(n+1)=2(2^{\lceil\frac{n-1}{2}\rceil+1}-2)+2$
\end_inset


\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $b(n+1)=2^{\lceil\frac{n-1}{2}\rceil+2}-2$
\end_inset

 or 
\begin_inset Formula $\lceil\frac{n-1}{2}\rceil+2=\lceil\frac{n+1}{2}\rceil+1$
\end_inset

par définition de la partie entière
\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $b(s+1)=2^{\lceil\frac{n+1}{2}\rceil+1}-2$
\end_inset


\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $b(n+1)=c(\lceil\frac{n+1}{2}\rceil)$
\end_inset


\end_layout

\begin_layout Standard

\emph on
Hérédité confirmée par le théorème de la recurrence forte.
\end_layout

\begin_layout Standard
\noindent
e)Donner le terme général de la suite b(s).
 En déduire un encadrement du nombre d'appels récursifs réalisés par RechercheEx
haustive(2, [1, 2], s).
 Que peut-on en conclure quant à la complexité temporelle de l'algorithme
 RechercheExhaustive?
\end_layout

\begin_layout Standard

\emph on
On déduit de la question précédente que 
\begin_inset Formula $b(s)=2^{\lceil\frac{n}{2}\rceil+1}-2$
\end_inset

.
\end_layout

\begin_layout Standard

\emph on
On peut ainsi encadre la complexité 
\begin_inset Formula $2^{\lceil\frac{n}{2}\rceil+1}-2\leq a(s)\leq2^{s+1}-2$
\end_inset


\end_layout

\begin_layout Standard

\emph on
On peut ainsi en déduire que RechercheExhaustive est minorée par 
\begin_inset Formula $2^{n/2}$
\end_inset

et surtout majorée 
\begin_inset Formula $2^{n}$
\end_inset

 par et donc de complexité 
\begin_inset Formula $\mathcal{\mathcal{O}}(2^{n})$
\end_inset

 
\end_layout

\begin_layout Subsection
Algorithme II : Programmation dynamique
\end_layout

\begin_layout Standard
Pour ce deuxième algorithme, nous allons exploiter la structure du problème
 pour éviter une exploration exhaustive de toutes les solutions.
 
\end_layout

\begin_layout Standard
On note m(S) le nombre minimum de bocaux pour S décigrammes de confiture
 et un tableau de capacités V.
 On définit une famille de problèmes intermédiaires de la façon suivante:
 étant donnés un entier s et un entier 
\begin_inset Formula $\forall i\in\left\{ 1,\ldots,k\right\} $
\end_inset

, on note m(s, i) le nombre minimum de bocaux nécessaires pour une quantité
 totale s en ne choisissant des bocaux que dans le système de capacités
 V [1], V [2] , .
 .
 .
 , V[i].
 
\end_layout

\begin_layout Standard
Pour initialiser la récursion, on pose: 
\end_layout

\begin_layout Description
- 
\begin_inset Formula $m(0,i)=0\qquad\forall i\in\left\{ 1,\ldots,k\right\} $
\end_inset

 : il est possible de réaliser la capacité totale 0 avec 0 bocal.
 
\end_layout

\begin_layout Description
- 
\begin_inset Formula $m(s,0)=+\infty\qquad\forall s\geq1$
\end_inset

 : il n’est pas possible de réaliser la capacité s ≥ 1 sans utiliser au
 moins un bocal.
 
\end_layout

\begin_layout Description
- 
\begin_inset Formula $m(s,i)=+\infty\qquad$
\end_inset

 
\begin_inset Formula $\forall i\in\left\{ 1,\ldots,k\right\} ,\:\;\forall s>0$
\end_inset

 : il n’est pas possible de réaliser une capacité négative.
\end_layout

\begin_layout Paragraph
Question 3
\end_layout

\begin_layout Standard
a)Quelle est la valeur de m(S) en fonction des valeurs m(s,i) définies dans
 la section précédente?
\end_layout

\begin_layout Standard
\begin_inset Formula $m(S)=m(S,k)$
\end_inset


\end_layout

\begin_layout Standard
b)Montrer la relation de récurrence suivante pour tout 
\begin_inset Formula $\boldsymbol{i\in\left\{ 1,\ldots,k\right\} }$
\end_inset


\begin_inset Formula 
\[
m(s,i)=\begin{cases}
0 & si\;s=0\\
\min\left\{ m(s,i-1),m(s-V[i],i)+1\right\}  & sinon
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard

\emph on
Initialisation:
\end_layout

\begin_layout Standard

\emph on
\begin_inset Formula $m(0,i)=0$
\end_inset

 voir énoncé.
\end_layout

\begin_layout Standard

\emph on
Supposons la relation de l'énoncé vraie pour les valeurs de m(s',i') avec
 
\begin_inset Formula $s'\epsilon\left\{ 0,\ldots,s-1\right\} $
\end_inset

et 
\begin_inset Formula $i'\epsilon\left\{ 0,\ldots,i\right\} $
\end_inset

 ainsi que la valeur 
\begin_inset Formula $m(s,i-1)$
\end_inset

.
\end_layout

\begin_layout Standard

\emph on
alors, soit m(s, i) utilise un bocal de la plus grande contenance et est
 égal à m(s-V[i],i)+1, soit il on ne l’utilise pas et m(s,i) = (s,i-1).
 
\end_layout

\begin_layout Standard

\emph on
or on veut minimiser la valeur de m(s,i) donc on a min(m(s,i-1),m(s-v[i],i)+1)
 si s≠0
\end_layout

\begin_layout Paragraph
Question 4
\end_layout

\begin_layout Standard
Pour résoudre le problème de manière plus efficace que l’algorithme RechercheExh
austive, on va utiliser l’approche dite de programmation dynamique .Le calcul
 des valeurs m(s, i), grâce à la relation de récurrence décrite dans la
 question précédente, nous permettra de trouver m(S).
\end_layout

\begin_layout Standard
L’idée maîtresse est de ne pas calculer une même valeur m(s, i) plusieurs
 fois: pour cela on stocke ces valeurs dans un tableau M doublement indicé.
 Dans chaque case du tableau M[s, i] (avec s ∈{ 0 , .
 .
 .
 , S } et i ∈{ 0 , .
 .
 .
 , k }), on stocke la valeur m(s,i), c’est-à-dire soit une valeur ∞ , soit
 le nombre de bocaux utilisés.
\end_layout

\begin_layout Standard
a)Décrire (et justifier) dans quel ordre les cases du tableau M peuvent
 être remplies en utilisant la formule de récurrence.
\end_layout

\begin_layout Standard

\emph on
On remplira le tableau à l'aide d'une boucle sur s d'abord, puis sur i à
 l'interieur de celle-ci: On remplit pour chaque s les m(s,i) avec i croissant
 avant de passer à la valeur de s suivante
\end_layout

\begin_layout Standard
b)En déduire un algorithme AlgoProgDyn (en pseudo-code) qui détermine le
 nombre de bocaux nécessaires pour une quantité de confiture S.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
AlgoProgDyn(S,V,k):
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Creer un tableau m(S,I)
\end_layout

\begin_layout Plain Layout
Pour tout s appartenant à {0,...,S}
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $m(s,0)=+\infty$
\end_inset


\end_layout

\begin_layout Plain Layout
fin pour
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Pour tout i appartenant à {0,...,k}
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $m(0,i)=0$
\end_inset


\end_layout

\begin_layout Plain Layout
fin pour
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
pour tout s appartenant à {1,...S}:
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
pour tout i appartenant à {1,...,k}:
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
m(s,i)=min{m(s,i-1), m(s-V[i],i)+1}
\end_layout

\begin_layout Plain Layout
fin pour
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
fin pour
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
retourner m(s,i)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
c)Analyser la Complexité temporelle et spatiale de cet algorithme.
 On entend par Complexité spatiale l'espace mémoire requis en fonction de
 k et S.
\end_layout

\begin_layout Itemize
Complexité temporelle:
\end_layout

\begin_deeper
\begin_layout Itemize
L'algorithme effectue un parcours de chaque case du tableau en fonction
 des valeurs trouvées pour des s inférieurs, et termine lorsqu'il est à
 la case V[S][k].
 Il effectue donc un traitement pour chaque case, et il y a 
\begin_inset Formula $S\times k$
\end_inset

cases dans la matrice utilisée, donc cet algorithme a une Complexité de
 
\begin_inset Formula $\Theta(S\times k)$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
Complexité spatiale:
\end_layout

\begin_deeper
\begin_layout Itemize
L'algorithme va nécessiter un stockage d'un tableau de 
\begin_inset Formula $S\times k$
\end_inset

cases, donc il a une complexité spatiale de 
\begin_inset Formula $\Theta(S\times k)$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
Question 5 
\end_layout

\begin_layout Standard
On désire à présent permettre à l’algorithme de retourner un tableau A indiquant
 le nombre de bocaux pris pour chaque type de capacités.
 
\end_layout

\begin_layout Standard
a) Une première idée est de placer dans chaque case du tableau M[s,i], un
 tableau A indiquant les bocaux pris pour la capacité totale s et des capacités
 de bocaux prises parmi V [1], .
 .
 .
 , V [i].
 Indiquer les modifications à effectuer dans l’algorithme précédent.
 Indiquer la complexité spatiale de cet algorithme
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
AlgoProgDynTab(S,V,k):
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Soit m[S,I] un tableau de tuple(entier, tableau[k])
\end_layout

\begin_layout Plain Layout
Pour tout s appartenant à {0,...,S}
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $m(s,0)\left[1\right]=+\infty$
\end_inset


\end_layout

\begin_layout Plain Layout
fin pour
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Pour tout i appartenant à {0,...,k}
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $m(0,i)\left[1\right]=0$
\end_inset


\end_layout

\begin_layout Plain Layout
fin pour
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
pour tout s appartenant à {1,...S}:
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
pour tout i appartenant à {1,...,k}:
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
m(s,i)[1] =min{m(s,i-1)[1], m(s-V[i],i)[1]+1}
\end_layout

\begin_layout Plain Layout
si m(s,i)[1]≠m(s,i-1)[1]:
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
m(s,i)[2][i]+=1
\end_layout

\begin_layout Plain Layout
fin si
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
fin pour
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
fin pour
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
retourner m(s,i)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
b) On souhaite éviter de copier dans chaque case du tableau M, les tableaux
 A des bocaux utilisés.
 Pour ce faire, on conserve l’algorithme initial et on va reconstituer a
 posteriori le tableau A de la solution optimale : ce second algorithme
 est souvent appelé “algorithme- retour” (ou “backward”).
 L’id́ée est basée sur la remarque suivante : en remarquant que M[s,i] est
 égal soit à M[s−V[i],i]+1; soit à M[s,i−1], on sera en mesure de savoir
 si un bocal de capacit́é V [i] a été choisi ou non, et quelle case du tableau
 il faut ensuite examiner pour connaître les autres bocaux choisis.
 Décrire ce algorithme-retour (en pseudo-code) et indiquer la complexité
 temporelle et spatiale globale de cet algorithme
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
AlgoProgDyn_retour(S,V,k,m):
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
(avec m le tableau de l'algorythme dynamique)
\end_layout

\begin_layout Plain Layout
Soit A[k] un tableau
\end_layout

\begin_layout Plain Layout
tant que s>0:
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
si m(s,k)=m(s-V[k],k)+1
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
A[k]= A[k]+1
\end_layout

\begin_layout Plain Layout
S=S-V[k]
\end_layout

\begin_layout Plain Layout
fin si
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
sinon k = k-1
\end_layout

\begin_layout Plain Layout
fin tant que
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
retourner A
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
la compléxité temporelle dans le pire cas est en 
\begin_inset Formula $\Theta(s+k)$
\end_inset

 iterations pour l'algortithme retour.
 On a donc une complexité totale est en 
\begin_inset Formula $\varTheta(s*k+s+k)$
\end_inset


\end_layout

\begin_layout Standard

\emph on
La complexité spatiale est en 
\begin_inset Formula $\varTheta(s*k+k)$
\end_inset


\end_layout

\begin_layout Standard

\emph on
Question 6
\end_layout

\begin_layout Standard

\emph on
Peut-on dire que cet algorithme est polynomial ?
\end_layout

\begin_layout Standard

\emph on
La complexité, 
\begin_inset Formula $\varTheta(s*k+k)$
\end_inset

 est un polynôme de degré 1.
 l'algorithme est donc polynomial
\end_layout

\begin_layout Subsection
Algorithme III : Cas particulier et algorithme glouton
\end_layout

\begin_layout Paragraph*
Quetion 7
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
AlgoGlouton(S,V,k):
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
res = 0
\end_layout

\begin_layout Plain Layout
tant queS > 0:
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
si S < v[k] :
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
k= k- 1
\end_layout

\begin_layout Plain Layout
fin si
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
si S ≥ v[k]:
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
res += S // v[k] 
\end_layout

\begin_layout Plain Layout
k= k-1 
\end_layout

\begin_layout Plain Layout
S = S - (S // v[k]) * v[k]
\end_layout

\begin_layout Plain Layout
fin si
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
fin tant que
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Indm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
retourner res
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
Sa complexité temporelle est dans le pire cas (uniquement des bocaux de
 1) 
\begin_inset Formula $\mathcal{O}(s*k)$
\end_inset


\end_layout

\begin_layout Paragraph
Question 8
\end_layout

\begin_layout Paragraph*
Montrer qu’il existe des systèmes de capacités qui ne sont pas glouton-compatibl
es.
 Justifiez votre réponse.
\end_layout

\begin_layout Standard

\emph on
Supposons S=160g et V={1,80,100}
\end_layout

\begin_layout Standard

\emph on
l'algorithme glouton rendra 61 (1 bocal de 100 et 60 de 1)
\end_layout

\begin_layout Standard

\emph on
alors qu'il existe la solution 2 (deux bocaux de 80)
\end_layout

\begin_layout Paragraph*
Question 9 (Bonus)
\end_layout

\begin_layout Paragraph*
a) Montrer qu’il existe un plus grand indice j pris dans {1,...,k} tel que
 oj < gj.
\end_layout

\begin_layout Standard

\emph on
la solution o est optimale et différente de g.
 le nombre de bocaux total utilisé par o est donc inferieur ou égal a celui
 de g.
 il existe donc forcément un indice j tel que 
\begin_inset Formula $o_{j}<g_{j}$
\end_inset

(si tous les indices de o sont supperieurs, o utilise plus de bocaux, et
 si ils sont égaux o=g)
\end_layout

\begin_layout Paragraph*
b) Montrer que 􏰆 
\begin_inset Formula $\sum V[i]g_{i}$
\end_inset

 = 􏰆 
\begin_inset Formula $\sum V[i]o_{i}$
\end_inset

 pour i allant de 1 à j
\end_layout

\begin_layout Standard
Si j=k, on a 
\begin_inset Formula $\sum V[i]gi$
\end_inset

 = 􏰆 
\begin_inset Formula $\sum V[i]oi$
\end_inset

 = S.
\end_layout

\begin_layout Paragraph*
c) En déduire que 􏰆 
\begin_inset Formula $\mathop{\sum}$
\end_inset

V [i]oi ≥ V [j]
\end_layout

\begin_layout Standard

\emph on
on peut en déduire que la solution optimale o ne passe pas par l'algorithme
 glouton.
 car il reste assez de confiture dans les pots V[1] à V[J-1] dans la solution
 o pour remplir au moins un pot de taille V[j] (ce que l'algorithme glouton
 ne laisse pas passer)
\end_layout

\begin_layout Paragraph*
Question 10 
\end_layout

\begin_layout Standard
Montrer que tout système de capacité V avec k = 2 est glouton-compatible
 (on rappelle qu’on a toujours V [1] = 1).
 
\end_layout

\begin_layout Standard

\emph on
Demonstration par l'absurde:
\end_layout

\begin_layout Standard

\emph on
Si S≤V[2] alors, on a pour seule solution de n’utiliser que des bocaux de
 taille 1, donc l’algorithme glouton sera une solution optimale.
\end_layout

\begin_layout Standard

\emph on
Si S≥V[2], soit y la valeur rendue par l’algorithme glouton, avec 
\begin_inset Formula $y=a+b$
\end_inset

 et a*V[2]+b=S, la division euclidienne de S par V[2].
 
\end_layout

\begin_layout Standard

\emph on
Supposons x une solution optimale qui n’est pas issue de l’algorithme glouton,
 avec un V de capacité 2 et une quantité S, et x<y.
 
\end_layout

\begin_layout Standard

\emph on
On a par définition x=a’+b’, a’ la quantité de bocaux V[2] et b’ la quantité
 b’=S-a’*V[2] (nombre de bocaux de taille 1 utilisés) supposons a’≠a et
 b’≠b.
 (par définition du système de taille 2 si a’=a, b’=b).
\end_layout

\begin_layout Standard

\emph on
supposons a’>a, par définition de la division euclidienne, a’*V[2]>S donc
 impossible.
\end_layout

\begin_layout Standard

\emph on
On a donc a’<a.
 On a alors b’=b+(a-a’)*V[2] puisqu’on doit remplir le reste de la confiture
 avec des bocaux de 1.
 donc on a x=a’+b+v[2]a-V[2]a’
\end_layout

\begin_layout Standard

\emph on
x=a+b +(V[2]-1)a-(V[2]-1)a’ 
\end_layout

\begin_layout Standard

\emph on
x=a+b +(V[2]-1)a-a’ 
\end_layout

\begin_layout Standard

\emph on
x= y + (V[2]-1)a-a’ 
\end_layout

\begin_layout Standard

\emph on
or, a’<a donc, et V[2]>1 donc (V[2]-1)a-a’>0 et y<x
\end_layout

\begin_layout Standard

\emph on
Contradiction.
\end_layout

\begin_layout Standard

\emph on
On a donc montré l'absurde qu'un système de capacité de taille 2 est toujours
 glouton-compatible.
\end_layout

\begin_layout Paragraph*
Question 11
\end_layout

\begin_layout Standard
Prouver que cet algorithme de test est polynomial en donnant sa complexité.
\end_layout

\begin_layout Standard

\emph on
On peut facilement estimer la première boucle par 
\begin_inset Formula $\varTheta(V[k])$
\end_inset

 (elle fait exactement V[k]+V[k-1]-V[3]+1 tours)
\end_layout

\begin_layout Standard

\emph on
La deuxième boucle est effectuée k fois, et fait appel deux fois a AlgoGlouton
 (de complexité 
\begin_inset Formula $\mathcal{O}(s*k)$
\end_inset

) et fait une comparaison.
 on a donc k tours en 
\begin_inset Formula $\mathcal{O}(s*k+1)$
\end_inset


\end_layout

\begin_layout Standard

\emph on
on se retrouve donc avec une boucle en 
\begin_inset Formula $\mathcal{O}(s*k^{2}+k)$
\end_inset

 et donc une complexité en 
\begin_inset Formula $\varTheta(V[k]*(s*k^{2}+1))$
\end_inset

 qui est donc bien polynomiale
\end_layout

\begin_layout Section
Mise en œuvre
\end_layout

\end_body
\end_document
